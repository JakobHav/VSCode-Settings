{
    // -------------------------------------------------------------------
    // VIM CONFIG 
    // -------------------------------------------------------------------
    "whichkey.bindings": [
        {
            "key": "c",
            "name": "Comment Line",
            "type": "command",
            "command": "editor.action.commentLine"
        },
        {
            "key": "y",
            "name": "Insert Copyright Section",
            "type": "command",
            "command": "multiCommand.insertCopyByLang"
        },
        {
            "key": "h",
            "name": "Insert Header",
            "type": "command",
            "command": "multiCommand.insertHeaderByLang"
        },
        {
            "key": "t",
            "name": "+ Typst",
            "type": "bindings",
            "bindings": [
                {
                    "key": "t",
                    "name": "Insert Typst Table",
                    "type": "command",
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "Typst Table"
                    },
                },
                {
                    "key": "s",
                    "name": "Insert 50/50 Split",
                    "type": "command",
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "Typst Split"
                    },
                },
            ]
        },
        {
            "key": "s",
            "name": "+ Snippets",
            "type": "bindings",
            "bindings": [
                {
                    "key": " ",
                    "name": "Insert File Template",
                    "type": "command",
                    "command": "multiCommand.insertDocByLang"
                },
                {
                    "key": "w",
                    "name": "Insert While",
                    "type": "command",
                    "command": "multiCommand.insertWhileByLang"
                },
                {
                    "key": "f",
                    "name": "Insert For",
                    "type": "command",
                    "command": "multiCommand.insertForByLang"
                },
                {
                    "key": "i",
                    "name": "Insert If",
                    "type": "command",
                    "command": "multiCommand.insertIfByLang"
                },
                {
                    "key": "m",
                    "name": "Insert Match",
                    "type": "command",
                    "command": "multiCommand.insertMatchByLang"
                },
                {
                    "key": "c",
                    "name": "Insert Class",
                    "type": "command",
                    "command": "multiCommand.insertClassByLang"
                }
            ]
        }
    ],
    "vim.useSystemClipboard": true,
    "vim.leader": ",",
    "multiCommand.commands": [
        {
            "command": "multiCommand.insertHeaderByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_header"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_header"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_header"
                    },
                    "when": "editorLangId == rust"
                },
            ]
        },
        {
            "command": "multiCommand.insertCopyByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_cpy"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_cpy"
                    },
                    "when": "editorLangId == json"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_cpy"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_cpy"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertDocByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_file"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_file"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_file"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertClassByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_class"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_class"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_class"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertIfByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_if"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_if"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_if"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertWhileByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_while"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_while"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_while"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertForByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_for"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_for"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_for"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        },
        {
            "command": "multiCommand.insertMatchByLang",
            "sequence": [
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "python_match"
                    },
                    "when": "editorLangId == python"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "cpp_match"
                    },
                    "when": "editorLangId == cpp"
                },
                {
                    "command": "editor.action.insertSnippet",
                    "args": {
                        "name": "rust_match"
                    },
                    "when": "editorLangId == rust"
                }
            ]
        }
    ],
    // -------------------------------------------------------------------
    // APPEARANCE
    // -------------------------------------------------------------------
    "workbench.colorCustomizations": {
        "[Default Dark+]": {
            "titleBar.activeBackground": "#000000",
            "sideBar.background": "#0c0c0ccb",
            "editor.background": "#0c0c0ccb",
            "statusBar.background": "#0c0c0ccb",
            "statusBar.noFolderBackground": "#0c0c0ccb",
            "tab.activeBackground": "#0c0c0ccb",
            "tab.inactiveBackground": "#0000002a"
        },
        "[Tokyo Night Ported Nvim]": {
            "titleBar.activeBackground": "#000000",
            "sideBar.background": "#0c0c0ccb",
            "editor.background": "#0c0c0ccb",
            "statusBar.background": "#0c0c0ccb",
            "statusBar.noFolderBackground": "#0c0c0ccb",
            "tab.activeBackground": "#0c0c0ccb",
            "tab.inactiveBackground": "#0000002a"
        },
        "[Default High Contrast]": {
            "focusBorder": "#6fc3df",
            "tab.selectedBorderTop": "#6fc3df",
            "titleBar.border": "#6fc3df",
            "scrollbarSlider.background": "#6fc3df4e",
            "editorIndentGuide.activeBackground1": "#ffffff87",
            "editorIndentGuide.background1": "#ffffff3e",
            "tab.activeBackground": "#000000"
        },
        "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font, monospace",
        "terminal.integrated.fontSize": 13,
        "terminal.integrated.lineHeight": 1.1,
        "terminal.integrated.letterSpacing": 0.5,
        "terminal.integrated.cursorStyle": "block",
        "terminal.integrated.cursorBlinking": false,
        "terminal.integrated.minimumContrastRatio": 1,
        "terminal.integrated.scrollback": 5000,
        "terminal.integrated.drawBoldTextInBrightColors": false,
        "terminal.integrated.enablePersistentSessions": false,
        "workbench.colorCustomizations": {
            "terminal.background": "#1c1c1c",
            "terminal.foreground": "#d0d0d0",
            "terminalCursor.foreground": "#d0d0d0",
            "terminal.ansiBlack": "#1c1c1c",
            "terminal.ansiRed": "#af5f5f",
            "terminal.ansiGreen": "#5f875f",
            "terminal.ansiYellow": "#87875f",
            "terminal.ansiBlue": "#5f87af",
            "terminal.ansiMagenta": "#5f5f87",
            "terminal.ansiCyan": "#5f8787",
            "terminal.ansiWhite": "#d0d0d0",
            "terminal.ansiBrightBlack": "#585858",
            "terminal.ansiBrightRed": "#d75f5f",
            "terminal.ansiBrightGreen": "#87af87",
            "terminal.ansiBrightYellow": "#ffd787",
            "terminal.ansiBrightBlue": "#87afd7",
            "terminal.ansiBrightMagenta": "#8787af",
            "terminal.ansiBrightCyan": "#5fd7d7",
            "terminal.ansiBrightWhite": "#eeeeee"
        },
    },
    "workbench.activityBar.location": "top",
    "workbench.editor.enablePreview": false,
    "workbench.editor.doubleClickTabToToggleEditorGroupSizes": "expand",
    "workbench.layoutControl.enabled": false,
    "workbench.panel.showLabels": false,
    "workbench.sideBar.location": "right",
    "workbench.startupEditor": "none",
    "window.commandCenter": false,
    "editor.minimap.enabled": false,
    "editor.lineNumbers": "relative",
    "chat.commandCenter.enabled": false,
    "todo-tree.highlights.useColourScheme": true,
    "pdf-preview.default.sidebar": false,
    // -------------------------------------------------------------------
    // LANGUAGE CONFIG 
    // -------------------------------------------------------------------
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[rust]": {
        "editor.defaultFormatter": "rust-lang.rust-analyzer"
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    },
    "[typst]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "myriad-dreamin.tinymist"
    },
    "[markdown]": {
        "diffEditor.ignoreTrimWhitespace": false
    },
    "python.createEnvironment.trigger": "off",
    "[cpp]": {
        "editor.defaultFormatter": "ms-vscode.cpptools"
    },
    "rust-analyzer.hover.actions.enable": false,
    "rust-analyzer.inlayHints.typeHints.enable": false,
    "rust-analyzer.lens.enable": false,
    "rust-analyzer.diagnostics.enable": false,
    "editor.defaultFormatter": "ms-python.python",
    "editor.defaultColorDecorators": "auto",
    "files.autoSave": "afterDelay",
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.diagnosticSeverityOverrides": {
        "reportGeneralTypeIssues": "information",
        "reportWildcardImportFromLibrary": "none"
    },
    "autopep8.args": [
        "--ignore=F4,E123,E501,E704,E731,W5,C901"
    ],
    "[python]": {
        "editor.defaultFormatter": "ms-python.autopep8"
    },
    "flake8.path": [
        "--ignore=F4,E123,E501,E704,E731,W5,C901"
    ],
    // -------------------------------------------------------------------
    // OTHER 
    // -------------------------------------------------------------------
    "editor.fontSize": 16,
    "git.confirmSync": false,
    "git.enableSmartCommit": true,
    "editor.formatOnSave": true,
    "svelte.enable-ts-plugin": true,
    "svelte-intellisense.trace.server": "messages",
    "makefile.configureOnOpen": true,
    "git.openRepositoryInParentFolders": "never",
    // "cSpell.language": "en,de-de",
    // "cSpell.userWords": [
    // "L'Hopital"
    // ],
    "explorer.confirmPasteNative": false,
    "[plaintext]": {
        "editor.wordWrap": "on",
        "editor.wordWrapColumn": 80,
        "editor.wrappingIndent": "same"
    },
    "[txt]": {
        "editor.wrappingIndent": "same",
        "editor.wordWrap": "on",
        "editor.wordWrapColumn": 80,
    },
    "[typst-code]": {
        "editor.wordWrap": "on",
        "editor.wordWrapColumn": 100,
        "editor.wrappingIndent": "same"
    },
    "workbench.colorTheme": "Default High Contrast",
    "editor.stickyScroll.enabled": false,
    "editor.renderWhitespace": "none",
    "window.customTitleBarVisibility": "windowed",
    "terminal.integrated.enableMultiLinePasteWarning": "never",
    "explorer.confirmDragAndDrop": false,
    "explorer.confirmDelete": false,
    "[snippets]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "breadcrumbs.enabled": false,
}